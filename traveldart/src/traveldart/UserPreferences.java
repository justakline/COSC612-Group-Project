/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package traveldart;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Spliterators;
import java.util.stream.StreamSupport;

import com.google.gson.JsonArray;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.Gson;
import java.util.stream.Collectors;

import javax.swing.*;
import java.awt.*;
/**
 *
 * @author diego
 */
public class UserPreferences extends javax.swing.JFrame {

    /**
     * Creates new form UserPermissions
     */
    public UserPreferences() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        EventPreferencesDropDown = new javax.swing.JComboBox<>();
        eventCategoriesLabel = new javax.swing.JLabel();
        restaurantCategoriesLabel = new javax.swing.JLabel();
        RestaurantsCategoryDropDown = new javax.swing.JComboBox<>();
        generateRecButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CityTextField = new javax.swing.JTextField();
        HomeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter Your Preferences:");

        EventPreferencesDropDown.setModel(EventCategories.COMEDY.getAllValues());
        EventPreferencesDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EventPreferencesDropDownActionPerformed(evt);
            }
        });

        eventCategoriesLabel.setText("Event Categories:");

        restaurantCategoriesLabel.setText("Restaurant Categories:");

        RestaurantsCategoryDropDown.setModel(RestaurantCategories.TRADAMERICAN.getAllValues());

        generateRecButton.setText("Generate Recommendations");
        generateRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRecButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Location (City name):");

        CityTextField.setText("Baltimore");
        CityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CityTextFieldActionPerformed(evt);
            }
        });

        HomeButton.setText("Back to Home");
        HomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(CityTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RestaurantsCategoryDropDown, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(restaurantCategoriesLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                .addComponent(eventCategoriesLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(EventPreferencesDropDown, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(generateRecButton, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(HomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(372, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(HomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventCategoriesLabel)
                .addGap(11, 11, 11)
                .addComponent(EventPreferencesDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(restaurantCategoriesLabel)
                .addGap(18, 18, 18)
                .addComponent(RestaurantsCategoryDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(generateRecButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(188, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EventPreferencesDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EventPreferencesDropDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EventPreferencesDropDownActionPerformed

    private void generateRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRecButtonActionPerformed
        JsonArray events = new JsonArray();
        JsonArray restaurants = new JsonArray();

        // Get the selected String value from the JComboBox
        String selectedCategory = (String) EventPreferencesDropDown.getSelectedItem();
        EventCategories selectedEventCategory = EventCategories.valueOf(selectedCategory.toUpperCase().replaceAll(" ", "_"));
        
        String selectedRestCategory = (String) RestaurantsCategoryDropDown.getSelectedItem();
        RestaurantCategories selectedRestaurantCategory = RestaurantCategories.valueOf(selectedRestCategory.toUpperCase().replaceAll(" ", "_"));


        // Now you can use the enum value
        System.out.println("Selected Category: " + selectedRestaurantCategory);

        // If you want to put it in a List:
        List<RestaurantCategories> restList = Arrays.asList(selectedRestaurantCategory);
        System.out.println(restList);


        List<EventCategories> eventList = Arrays.asList(selectedEventCategory);
//        List<RestaurantCategories> restList = Arrays.asList(selectedRestaurantCategory);
        System.out.println("here");
        System.out.println(restList);
        try {
            // TODO add your handling code here:
           events = Service.getInstance().getTicketMasterEvents(CityTextField.getText(), "2024-12-10T15:01:00Z", "2024-12-30T15:01:00Z", eventList);
           restaurants = Service.getInstance().getYelpRestaurants(CityTextField.getText(), restList, 2, 10.0);  //"8000 York Road, Towson, MD, 21252"
        } catch (IOException ex) {
            Logger.getLogger(UserPreferences.class.getName()).log(Level.SEVERE, null, ex);
        }
//         System.out.println(events);
        // System.out.println(restaurants);   
        // Gson gson = new Gson();
        // new ArrayList<RestaurantCategories>(Arrays.asList(RestaurantCategories.CHINESE)
        // new ArrayList<EventCategories>(Arrays.asList(EventCategories.FOOTBALL))
        Preferences p = new Preferences(restList, eventList, 2, new Location("8000 York Rd, Towson, MD, 21252"), 5);
        JsonObject rec = Service.getInstance().createRecommendation(events, restaurants, p);
//        System.out.println(Service.getInstance().formatJson(rec.toString()));
        
        JsonArray eventsArray = rec.getAsJsonArray("events"); // Get the 'events' array
        JsonObject firstEvent = eventsArray.get(0).getAsJsonObject(); // Get the first event object
        JsonObject secondEvent = eventsArray.get(1).getAsJsonObject(); 
        JsonObject thirdEvent = eventsArray.get(2).getAsJsonObject(); 

        // get event names
        String firstName = firstEvent.get("name").getAsString(); // Access a property inside the first event object 
        String secondName = secondEvent.get("name").getAsString(); 
        String thirdName = thirdEvent.get("name").getAsString();
        
        JsonObject datesObject1 = firstEvent.getAsJsonObject("dates");
        JsonObject startObject1 = datesObject1.getAsJsonObject("start");
        String firstDate = startObject1.get("localDate").getAsString(); // store
        if( firstDate == null ){
            firstDate = "";
        }
        
        JsonObject datesObject2 = secondEvent.getAsJsonObject("dates");
        JsonObject startObject2 = datesObject2.getAsJsonObject("start");
        String secondDate = startObject2.get("localDate").getAsString(); // store
        if( secondDate == null ){
            secondDate = "";
        }
        
        JsonObject datesObject3 = thirdEvent.getAsJsonObject("dates");
        JsonObject startObject3 = datesObject3.getAsJsonObject("start");
        String thirdDate = startObject3.get("localDate").getAsString(); // store
        if( thirdDate == null ){
            thirdDate = "";
        }
        
        // Access the "info" field (String) store all
        String info1 = "";
        try{
            info1 = firstEvent.get("info").getAsString();
        } catch(Exception e){
            info1 = "";
        }
        String info2 = "";
        try {
            info2 = secondEvent.get("info").getAsString();
        } catch(Exception e) {
            if(info2 == null){
                info2 = "";
            }
        }
        String info3 = "";
        try{
            info3 = thirdEvent.get("info").getAsString();
        } catch(Exception e){
            if(info3 == null){
                info3 = "";
            }
        }

        // Access the "score" field (Integer)
        int score1 = firstEvent.get("score").getAsInt();
        String scoreString1 = String.valueOf(score1);
        if(scoreString1 == null){
            scoreString1 = "";
        }
        int score2 = secondEvent.get("score").getAsInt();
        String scoreString2 = String.valueOf(score2);
        if(scoreString2 == null){
            scoreString2 = "";
        }
        int score3 = thirdEvent.get("score").getAsInt();
        String scoreString3 = String.valueOf(score3);
        if(scoreString3 == null){
            scoreString3 = "";
        }

        String[][] topEvents = {
            {firstName, firstDate, info1, scoreString1},
            {secondName, secondDate, info2, scoreString2},
            {thirdName, thirdDate, info3, scoreString3}
        };
        
        JsonArray restaurantsArray = rec.getAsJsonArray("restaurants");
        
        String[][] topRestaurants = new String[3][4]; //  3 rows for the top 3 restaurants 4 columns for name, alias, title, score

        // Iterate through the restaurants array and extract the top 3
        for (int i = 0; i < Math.min(3, restaurantsArray.size()); i++) {
            JsonObject restaurant = restaurantsArray.get(i).getAsJsonObject();
            String name = restaurant.get("name").getAsString();
            String score = restaurant.get("score").getAsString();  // Get the score

            JsonArray categories = restaurant.getAsJsonArray("categories");
            StringBuilder aliases = new StringBuilder();
            StringBuilder titles = new StringBuilder();
            for (JsonElement category : categories) {
                JsonObject categoryObj = category.getAsJsonObject();
                aliases.append(categoryObj.get("alias").getAsString()).append(", ");
                titles.append(categoryObj.get("title").getAsString()).append(", ");
            }
            // Remove trailing commas
            if (aliases.length() > 0) {
                aliases.setLength(aliases.length() - 2); // Remove the last comma and space
            }
            if (titles.length() > 0) {
                titles.setLength(titles.length() - 2); // Remove the last comma and space
            }

            // Store name, alias, title, and score in the 2D array
            topRestaurants[i][0] = name;
            topRestaurants[i][1] = aliases.toString();
            topRestaurants[i][2] = titles.toString();
            topRestaurants[i][3] = score;
        }
        
        openPopUpWindow(topRestaurants, topEvents);
//        String[] arr = {firstName, firstDate, info1, scoreString1};
//        System.out.println(Arrays.toString(arr));
        
    }//GEN-LAST:event_generateRecButtonActionPerformed

    private void CityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CityTextFieldActionPerformed

    private void HomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButtonActionPerformed
        // TODO add your handling code here:
        HomePage refForm = new HomePage();
        refForm.setVisible(true);
        refForm.pack();
        refForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_HomeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserPreferences.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserPreferences.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserPreferences.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserPreferences.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        String c = EventCategories.BASEBALL.toString();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserPreferences().setVisible(true);
            }
        });
    }
    
    
    private static void openPopUpWindow(String[][] restaurantArray, String[][] eventArray) {
 
    JFrame popUpFrame = new JFrame("Pop-Up Window");
    popUpFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    popUpFrame.setSize(400, 500);

    // Create a JTextArea to display the contents
    JTextArea textArea = new JTextArea();
    textArea.setEditable(false);  // Make it read-only
    textArea.setFont(new Font("Arial", Font.PLAIN, 14));

    StringBuilder content = new StringBuilder();


    content.append("Event Details:\n\n");
    for (int i = 0; i < eventArray.length; i++) {
        for (int j = 0; j < eventArray[i].length; j++) {
            content.append(eventArray[i][j]).append("\t");
        }
        content.append("\n");
    }

    content.append("\n---------------------------\n\n");

    content.append("Restaurant Details:\n\n");
    for (int i = 0; i < restaurantArray.length; i++) {
        for (int j = 0; j < restaurantArray[i].length; j++) {
            content.append(restaurantArray[i][j]).append("\t");
        }
        content.append("\n");
    }

    textArea.setText(content.toString());

    popUpFrame.add(new JScrollPane(textArea), BorderLayout.CENTER);

    popUpFrame.setVisible(true);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CityTextField;
    private javax.swing.JComboBox<String> EventPreferencesDropDown;
    private javax.swing.JButton HomeButton;
    private javax.swing.JComboBox<String> RestaurantsCategoryDropDown;
    private javax.swing.JLabel eventCategoriesLabel;
    private javax.swing.JButton generateRecButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel restaurantCategoriesLabel;
    // End of variables declaration//GEN-END:variables
}
